@model BOL.tbl_SearchValidation
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Index</h2>
@if (TempData["Msg"] != null)
{
    <h3>@TempData["Msg"].ToString()</h3>
}

@using (Html.BeginForm("Find", "Search", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4></h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.ChildName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ChildName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ChildName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @*@Html.LabelFor(model => model.ChildAlternativeName, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <h4 class="control-label col-md-2">Nick Name</h4>
            <div class="col-md-10">
                @Html.EditorFor(model => model.ChildAlternativeName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ChildAlternativeName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Age, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Age, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Age, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Gender", (IEnumerable<SelectListItem>)ViewBag.Gender, new { htmlAttributes = new { @class = "form-control" } })

                @*@Html.EditorFor(model => model.Gender, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
            </div>
        </div>



        <div class="form-group">
            @Html.LabelFor(model => model.Build, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Build", (IEnumerable<SelectListItem>)ViewBag.Build, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Build, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @*@Html.LabelFor(model => model.HairColor, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <h5 class="control-label col-md-2"><b>Hair Colour</b></h5>
            <div class="col-md-10">

                @Html.DropDownList("HairColor", (IEnumerable<SelectListItem>)ViewBag.HairColour, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.HairColor, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @*@Html.LabelFor(model => model.EyeColor, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <h5 class="control-label col-md-2"><b>Eye Colour</b></h5>
            <div class="col-md-10">
                @Html.DropDownList("EyeColor", (IEnumerable<SelectListItem>)ViewBag.EyeColour, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EyeColor, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Glasses, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Glasses", (IEnumerable<SelectListItem>)ViewBag.Glasses, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Glasses, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @*@Html.LabelFor(model => model.IdentityMark, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <h5 class="control-label col-md-2"><b>Identity Mark</b></h5>
            <div class="col-md-10">
                @Html.DropDownList("IdentityMark", (IEnumerable<SelectListItem>)ViewBag.IdentityMark, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IdentityMark, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @*@Html.LabelFor(model => model.IdentityMark, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <h5 class="control-label col-md-2"><b>Select Body Part</b></h5>
            <div class="col-md-10">
                @Html.DropDownList("IdentificationMarkOnBody", (IEnumerable<SelectListItem>)ViewBag.IdentityMarkLocation, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IdentificationMarkOnBody, "", new { @class = "text-danger" })
            </div>
        </div>



        <div class="form-group">
            @*@Html.LabelFor(model => model.Shirt, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <h5 class="control-label col-md-2"><b>Shirt/Kameez Colour</b></h5>
            <div class="col-md-10">
                @Html.DropDownList("Shirt", (IEnumerable<SelectListItem>)ViewBag.Colour, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Shirt, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @*@Html.LabelFor(model => model.Trouser_Skert, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <h5 class="control-label col-md-2"><b>Pent/Shalwar Colour</b></h5>
            <div class="col-md-10">
                @Html.DropDownList("Trouser_Skert", (IEnumerable<SelectListItem>)ViewBag.Colour, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Trouser_Skert, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @*@Html.LabelFor(model => model.MissingLocation, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <h5 class="control-label col-md-2"><b>Provinve</b></h5>
            <div class="col-md-10">
                @Html.DropDownList("Province", (IEnumerable<SelectListItem>)ViewBag.Province, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Province, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @*@Html.LabelFor(model => model.MissingLocation, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <h5 class="control-label col-md-2"><b>City</b></h5>
            <div class="col-md-10">
                @Html.DropDownList("City", (IEnumerable<SelectListItem>)ViewBag.City, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Search" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
